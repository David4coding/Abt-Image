// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AbtRegressionTest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("AbtImg", Description="\t\t Abt\'s Image BaseLine and Regression testing", SourceFile="Features\\AbtImg.feature", SourceLine=0)]
    public partial class AbtImgFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AbtImg.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AbtImg", "\t\t Abt\'s Image BaseLine and Regression testing", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("WinZip Test", new string[] {
                "WinZip"}, SourceLine=3)]
        public virtual void WinZipTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WinZip Test", new string[] {
                        "WinZip"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("i have created WinZip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("added a file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.When("i save the ZipFile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("the ZipFile should be compressed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Microsoft Office Test", new string[] {
                "Word"}, SourceLine=10)]
        public virtual void MicrosoftOfficeTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Microsoft Office Test", new string[] {
                        "Word"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("i have created a new Word document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.And("added a new paragraph", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.When("i save the Word document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("the Word document should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Microsoft Excel Test", new string[] {
                "Excel"}, SourceLine=17)]
        public virtual void MicrosoftExcelTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Microsoft Excel Test", new string[] {
                        "Excel"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("i have created a new Excel document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And("added a few rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("i save the Excel document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the Excel document should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Microsoft PowerPoint Test", new string[] {
                "PowerPoint"}, SourceLine=24)]
        public virtual void MicrosoftPowerPointTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Microsoft PowerPoint Test", new string[] {
                        "PowerPoint"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("i have created a new PowerPoint document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("added some text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When("i save the PowerPoint it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the PowerPoint document should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Microsoft Access DB Test", new string[] {
                "AccessDB"}, SourceLine=31)]
        public virtual void MicrosoftAccessDBTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Microsoft Access DB Test", new string[] {
                        "AccessDB"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("i have created a new Access DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.Then("the Access DB should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Microsoft Outlook Test", new string[] {
                "Outlook"}, SourceLine=36)]
        public virtual void MicrosoftOutlookTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Microsoft Outlook Test", new string[] {
                        "Outlook"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("i opened Outlook", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.Then("Outlook is logged with my Windows credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Skype For Business Test", new string[] {
                "SkypeForBusiness"}, SourceLine=41)]
        public virtual void SkypeForBusinessTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skype For Business Test", new string[] {
                        "SkypeForBusiness"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("i have logged to Windows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.Then("Skype for Business opened with my user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("JAVA Test", new string[] {
                "JAVA"}, SourceLine=46)]
        public virtual void JAVATest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("JAVA Test", new string[] {
                        "JAVA"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("i opened the windows CMD and input java -version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.Then("i can cofirm the Java Version is correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Flash Player Test", new string[] {
                "FlashPlayer"}, SourceLine=51)]
        public virtual void FlashPlayerTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Flash Player Test", new string[] {
                        "FlashPlayer"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("i see FlashPlayer is installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.Then("i can see Flash\'s registry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SilverLight Test", new string[] {
                "SilverLight"}, SourceLine=56)]
        public virtual void SilverLightTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SilverLight Test", new string[] {
                        "SilverLight"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("i see SilverLight is installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.Then("i can see Silverlight\'s registry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Symantec Active Scan Test", new string[] {
                "Symantec"}, SourceLine=61)]
        public virtual void SymantecActiveScanTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Symantec Active Scan Test", new string[] {
                        "Symantec"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("Symantec active scan is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Symantec Encryption Desktop Test", SourceLine=64)]
        public virtual void SymantecEncryptionDesktopTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Symantec Encryption Desktop Test", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("im using an Abt Computer Encryption Desktop should be available and running at st" +
                    "art up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Symantec Encryption Desktop Service Test", SourceLine=67)]
        public virtual void SymantecEncryptionDesktopServiceTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Symantec Encryption Desktop Service Test", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given("im using an Abt Computer Encryption Desktop process running at start up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SCCM Test", new string[] {
                "SCCM"}, SourceLine=71)]
        public virtual void SCCMTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SCCM Test", new string[] {
                        "SCCM"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("im using an abt laptop SCCM should be available and running at start up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Bit9 Test", new string[] {
                "Bit9"}, SourceLine=75)]
        public virtual void Bit9Test()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bit9 Test", new string[] {
                        "Bit9"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("im using an Abt Computer Bit should be available and running at start up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Carbon Black Test", new string[] {
                "CarbonBlack"}, SourceLine=79)]
        public virtual void CarbonBlackTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Carbon Black Test", new string[] {
                        "CarbonBlack"});
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given("im using an Abt Computer Carbon Black should be available and running at start up" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
